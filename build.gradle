import groovy.io.FileType

/*
    Copyright (C) 2000 - 2017 Silverpeas

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    As a special exception to the terms and conditions of version 3.0 of
    the GPL, you may redistribute this Program in connection with Free/Libre
    Open Source Software ("FLOSS") applications as described in Silverpeas's
    FLOSS exception.  You should have recieved a copy of the text describing
    the FLOSS exception, and it is also available here:
    "http://www.silverpeas.org/docs/core/legal/floss_exception.html"

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
description = 'The Gradle plugin to set up Silverpeas. It is used both to install or to upgrade Silverpeas.'
group = 'org.silverpeas'
version = '6.0-SNAPSHOT'

apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'
apply plugin: 'groovy'
apply plugin: 'org.ajoberstar.grgit'

/* cache management
configurations {
  all {
    resolutionStrategy {
      cacheDynamicVersionsFor 0, 'seconds'
      cacheChangingModulesFor 0, 'seconds'
    }
  }
}*/

project.configure(project) {
  if (project.version.endsWith('-SNAPSHOT')) {
    project.extensions.snapshot = true
  } else {
    project.extensions.snapshot = false
  }
}

repositories {
  maven {
    url 'http://www.silverpeas.org/nexus/content/groups/silverpeas'
  }
  mavenLocal()
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact sourceJar {
        classifier 'sources'
      }
    }
  }
  repositories {
    maven {
      if (project.snapshot) {
        name 'silverpeas-snapshots'
        url 'http://www.silverpeas.org/nexus/content/repositories/snapshots/'
      } else {
        name 'silverpeas'
        url 'http://www.silverpeas.org/nexus/content/repositories/releases/'
      }
    }
  }
}

buildscript {
  dependencies {
    classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
    classpath 'org.ajoberstar:grgit:2.1.0'
  }
  repositories {
    maven {
      url 'http://www.silverpeas.org/nexus/content/groups/silverpeas'
    }
    jcenter()
    mavenLocal()
  }
}

dependencies {
  compile gradleApi()
  compile 'org.codehaus.groovy:groovy-all:2.4.10'
  compile 'commons-lang:commons-lang:2.6'
  compile 'commons-io:commons-io:2.2'
  compile 'org.apache.commons:commons-dbcp2:2.0.1'
  compile 'commons-codec:commons-codec:1.10'
  compile 'javax.jcr:jcr:2.0'
  compile 'org.apache.jackrabbit:jackrabbit-core:2.8.0'
  runtime 'org.mortbay.jetty:jetty-naming:6.1.26'
  runtime 'org.mortbay.jetty:jetty-util:6.1.26'
  runtime 'com.h2database:h2:1.3.173'
  runtime 'org.postgresql:postgresql:9.3-1100-jdbc41'
  runtime 'net.sourceforge.jtds:jtds:1.3.1'
  testCompile 'junit:junit:4.12'
}

ext {
  revision = grgit.head().abbreviatedId
}

jar {
  manifest {
    attributes(
        "Build-Version": project.version,
        "Git-Commit": grgit.head().abbreviatedId)
  }
}

task sourceJar(type: Jar) {
  from sourceSets.main.allSource
}

processTestResources.doLast {
  new File("${buildDir}/resources/test").eachFileRecurse(FileType.FILES) { file ->
    FileWriter props = new FileWriter("${file.path}.tmp")
    new FileReader(file).transformLine(props) { line ->
      if (line.contains('${buildDir}')) {
        line = line.replaceAll('\\$\\{buildDir\\}', buildDir.path.replaceAll("[\\\\]", '/'))
      }
      line
    }
    def propsFile = new File(file.path)
    def updatedPropsFile = new File("${file.path}.tmp")
    updatedPropsFile.setReadable(propsFile.canRead())
    updatedPropsFile.setWritable(propsFile.canWrite())
    updatedPropsFile.setExecutable(propsFile.canExecute())
    propsFile.delete()
    updatedPropsFile.renameTo(propsFile)
  }
}
